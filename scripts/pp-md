#!/bin/bash
# Pre-processes Markdown sources with PP (pandoc _p_re-_p_rocessor);
# *.pp.md -> *.md
#
# This is part of the [MoVeDo](https://github.com/movedo) project.
# See LICENSE.md for copyright information.

script_dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
# shellcheck source=./_common.sh
. "${script_dir}/_common.sh"

function find_pp_sources() {

	find . \
		-type f \
		-name "*.pp.md" \
		\( ! -regex '.*/\..*' \) \
		\( ! -path "./${build_dir}*" \) \
		\( ! -path "./_site/*" \)
}

if [ `find_pp_sources | wc -l` -lt 1 ]
then
	# No PP sources found
	exit 0
fi


tools=""
tools="$tools pp" # for pre-processing Markdown sources
tools="$tools realpath" # for calculating relative paths
_check_tools $tools
_check_env

# parameters
args="$@"
version_as_subtitle=false

if [ "${VERSION_AS_SUBTITLE:-}" != "" ] || _contains_word "--version-as-subtitle" "$args"
then
	version_as_subtitle=true
	args="${args//--version-as-subtitle/}"
fi

export rewrite_links=true
export proj_dir
export gen_src_dir
export filters_dir

echo
echo "Generate *.md from *.pp.md (Markdown with Pandoc pre-processor (PP) directives) ..."
function process_ppmd() {
	# HACK required inside the function, because BASH can not export arrays
	pandoc_extra=()
	doc_date="$(_fetch_document_date)"
	pandoc_extra+=(--metadata=date:"$doc_date")
	doc_version="$(_fetch_version)"
	pandoc_extra+=(--metadata=version:"$doc_version")
	if $version_as_subtitle
	then
		pandoc_extra+=(--metadata=subtitle:"version: $doc_version")
	fi

	local ppmd="$1"
	local rel_dir=`dirname "$ppmd"`
	local base=`basename -s ".pp.md" "$ppmd"`
	local source_rel="$rel_dir/${base}.pp.md"
	local target_abs="$gen_src_dir/$rel_dir/${base}.md"
	local target_rel=`realpath --relative-to="$proj_dir" "$target_abs"`
	local source_abs="`pwd`/$source_rel"
	local project_dir_rel=`realpath --relative-to="$proj_dir/$rel_dir" "$proj_dir"`
	local gen_project_dir_rel=`dirname "$target_rel"`
	local gen_project_dir_abs=`pwd`"/$gen_project_dir_rel"
	local sources_dir_rel="../.."
	echo -e "\tpp \"$source_rel\"\n\t\t> \"$target_rel\""
	local pre_dir=`pwd`
	cd "$gen_src_dir"
	pp \
		-Dprojdir="$project_dir_rel" \
		-Dsrcdir="$sources_dir_rel" \
		-Dgensrcdir="$gen_project_dir_abs" \
		"$source_abs" \
		> "$target_abs" \
		|| return $?
	cd "$pre_dir"
	if $rewrite_links
	then
		pandoc \
			--from=markdown \
			--to=markdown \
			--standalone \
			--atx-headers \
			-M rls_relative_only=True -M rls_ext_from=".pp.md" -M rls_ext_to=".md" --filter "$filters_dir/replace_link_suffixes.py" \
			--output="${target_rel}_out" \
			"${pandoc_extra[@]}" \
			"$target_rel"
		mv "${target_rel}_out" "$target_rel"
	fi
}
export -f process_ppmd

find_pp_sources | while read -d $'\n' -r pp_md_in
do
	bash -c 'process_ppmd "$0" || kill $PPID' "$pp_md_in"
done

