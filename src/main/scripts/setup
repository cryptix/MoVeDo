#!/bin/sh
# Install and setup all requirements.
#
# This is part of the [MoVeDo](https://github.com/movedo) project.
# See LICENSE.md for copyright information.

script_dir_rel=`dirname $0`
script_dir=`cd ${script_dir_rel}; pwd`
. "${script_dir}/_common.sh"

sys_pkgs=""
sys_pkgs="$sys_pkgs git" # for fetching pdsite
#sys_pkgs="$sys_pkgs wget" # for getting a recent version of pandoc
sys_pkgs="$sys_pkgs cpio" # for copying a directory tree
sys_pkgs="$sys_pkgs texlive-latex-base" # for generating Latex/PDF with pandoc
#sys_pkgs="$sys_pkgs jekyll"
sys_pkgs="$sys_pkgs graphviz" # for PP
sys_pkgs="$sys_pkgs python-blockdiag" # for PP
sys_pkgs="$sys_pkgs asymptote" # for PP
#sys_pkgs="$sys_pkgs ditaa" # for PP
#sys_pkgs="$sys_pkgs plantuml" # for PP

install_dir_pp="$HOME/.pp"
install_dir_pdsite="$HOME/.pdsite"
old_system=false

tools=""
tools="$tools git"
tools="$tools wget" # for getting a recent version of pandoc
tools="$tools cpio" # for copying a directory tree
tools="$tools pandoc" # for PDF generation
tools="$tools pp" # for PP
tools="$tools dot" # for PP
tools="$tools blockdiag" # for PP
tools="$tools asy" # for PP
tools="$tools java" # for PP
#tools="$tools ditaa" # for PP
#tools="$tools plantuml" # for PP
#tools="$tools pdsite" # for HTML site generation - handled separately
tools="$tools bundle" # for ruby package handling (jekyll)
tools="$tools jekyll" # for HTML site generation

contains_word() {
	str="$1"
	word="$2"
	# we use printf instead of echo for better portability
	printf '%s' "$str" \
		| grep -q -e '\(^\|[ .,:;]\)'"$word"'\($\|[ .,:;]\)'
}

permanently_add_to_path() {
	add_path="$1"
	# HACK We probably should not modify the users environment permanently and globally like that
	echo '\nexport PATH="$PATH:'"$add_path"'"\n' >> "$HOME/.profile"
	export PATH="$PATH:$add_path"
}

# install latest pre-requisites available as system packages
# NOTE Only Debian/Ubuntu based systems are supported so far
is_deb=`which apt-get > /dev/null 2>&1 && echo "true" || echo "false"`
if $is_deb
then
	apt_cache_updated=false
	update_apt_cache() {
		# update apt-cache only once
		if ! $apt_cache_updated
		then
			apt-get update
			apt_cache_updated=true
		fi
	}
	pkgs_install() {
		local pkgs="$1"
		# filter out already installed packages
		local pkgs_missing=""
		for pkg in $pkgs
		do
			if ! dpkg -s "$pkg" > /dev/null 2>&1
			then
				local sep=`[ -z "$pkgs_missing" ] && echo "" || echo " "`
				pkgs_missing="$pkgs_missing$sep$pkg"
			fi
		done
		# install if not yet installed
		if [ -n "$pkgs_missing" ]
		then
echo "missing pkgs: '$pkgs_missing'"
sleep 1
			update_apt_cache
			apt-get install -y -qq $pkgs_missing
		fi
	}
	pkgs_install "$sys_pkgs"
else
	missing_tools=0
	for tool in $tools
	do
		if ! which $tool > /dev/null 2>&1
		then
			echo "WARNING: Missing tool: '$tool'" 1>&2
			missing_tools=`expr $missing_tools + 1`
		fi
	done
	if [ $missing_tools -ne 0 ]
	then
		echo "WARNING: Automatic install is only supported for debian based systems as of now" 1>&2
		exit 1
	fi
fi

if contains_word "$tools" "pandoc"
then
	# install pandoc if the latest version is not in PATH
	pandoc_ver_inst=`which pandoc > /dev/null 2>&1 && pandoc -v | head -n 1 | sed -e 's/.* //' || echo "NONE"`
	pandoc_ver_latest=`wget -O - --max-redirect 0 https://github.com/jgm/pandoc/releases/latest 2>&1 | grep "Location:" | sed 's/.*\/tag\/\([^ "]*\).*/\1/'`
	if [ "$pandoc_ver_inst" = "$pandoc_ver_latest" ]
	then
		echo "'pandoc' latest version ($pandoc_ver_latest) is already installed."
	else
		echo "Installing pandoc $pandoc_ver_latest ..."
		if $is_deb
		then
			pandoc_deb="pandoc-${pandoc_ver_latest}-1-amd64.deb"
			wget --quiet "https://github.com/jgm/pandoc/releases/download/$pandoc_ver_latest/$pandoc_deb"
			dpkg -i "$pandoc_deb"
			rm "$pandoc_deb"
		else
			pandoc_tgz="pandoc-${pandoc_ver_latest}-linux.tar.gz"
			wget --quiet "https://github.com/jgm/pandoc/releases/download/$pandoc_ver_latest/$pandoc_tgz"
			install_root=/usr/local
			#install_root=$HOME/.local
			tar xvzf "$pandoc_tgz" --strip-components 1 -C "$install_root"
			rm "$pandoc_tgz"
		fi
	fi
	# Check if it can be found and log the version info
	which pandoc
	pandoc -v | sed -e 's/^/\t/' | head -n 1 || true
fi

if contains_word "$tools" "pdsite"
then
	# install pdsite if not yet in PATH
	if which pdsite > /dev/null 2>&1
	then
		echo "'pdsite' is already installed."
	else
		if [ -e "${install_dir_pdsite}/bin/pdsite" ]
		then
			echo "'pdsite' already present."
		else
			echo "Installing 'pdsite' at '$install_dir_pdsite' ..."
			git clone https://github.com/hoijui/pdsite "$install_dir_pdsite"
			chmod 744 "$install_dir_pdsite/bin/pdsite"
		fi
		permanently_add_to_path "$install_dir_pdsite"
		echo "Done."
	fi
	# Check if it can be found and log the version info
	which pdsite
	pdsite -v | sed -e 's/^/\t/' | head -n 1
fi

if contains_word "$tools" "pp"
then
	# install pp if not yet in PATH
	if which pp > /dev/null 2>&1
	then
		echo "'pp' is already installed."
	else
		if [ -e "${install_dir_pp}/pp" ]
		then
			echo "'pp' already present."
		else
			echo "Installing 'pp' at '$install_dir_pp' ..."
			pre_dir=`pwd`
			mkdir -p "$install_dir_pp"
			cd "$install_dir_pp"
			if $old_system
			then
				# older systems (with GLIBC 2.29)
				archive="pp-linux-x86_64.txz"
				wget --quiet "https://cdsoft.fr/pp/$archive"
				tar vxf "$archive" pp > /dev/null
				rm "$archive"
			else
				# more recent systems
				wget --quiet --output-document=pp "https://fairkom.net/nextcloud/index.php/s/J5sLqJKtkGJkSE7/download"
			fi
			cd "$pre_dir"
		fi
		chmod +x "${install_dir_pp}/pp"
		permanently_add_to_path "$install_dir_pp"
		echo "Done."
	fi
	# Check if it can be found and log the version info
	which pp
	pp -v | sed -e 's/^/\t/' | head -n 1
fi

# Install jekyll dependencies
bundle install --path vendor/bundle
